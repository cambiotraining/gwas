---
pagetitle: GWAS
---

```{r setup, echo=FALSE, message=FALSE, warning=FALSE, purl=FALSE}
knitr::opts_chunk$set(error=FALSE, message=FALSE, warning=FALSE)
knitr::opts_knit$set(root.dir = "../course_files")
set.seed(123)
```

# Running GWAS

:::{.callout-tip}
#### Learning objectives

- Fit a GLM model to trait data using PLINK both with and without covariates.
- Generate Q-Q plots for the p-values from the association test, to assess over- or under-inflation issues.
- Recognise and apply correction for population structure in the GLM model.

:::


## GLM

Fitting a genotypic linear model to our traits with PLINK can be done using the `--glm` option (for "generalised linear model"). 
We also need to provide a phenotype file, which is tab-delimited with the first two columns being the family and sample IDs, and remaining columns the traits. 
PLINK will automatically detect whether the traits are continous or binary and fit a model accordingly. 

As before, we apply the quality filters discussed in previous sections. 
Here is the full command: 

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset_nocovar \
  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \
  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \
  --pheno data/phenotypes.tsv \
  --glm allow-no-covars
```

This command outputs one file for each trait. 
The file extensions are `.glm.linear` for quantitative traits and `.glm.logistic.hybrid` for binary traits. 


:::{.callout-important}
#### Set up your R session

If you haven't done so already, start an R session with the following packages loaded: 

```{r load-packages}
# load the libraries
library(tidyverse) # data manipulation
library(patchwork) # to compose plots
library(janitor)   # to clean column names
theme_set(theme_minimal()) # change default ggplot2 theme
```

:::


## Q-Q plots

The results files are tab-delimited, which we can read into R as usual. 
We start with one of our quantiative traits, blood pressure: 

```{r}
blood_nocovar <- read_tsv("results/1000G_subset_nocovar.blood.glm.linear") |> 
  clean_names()

head(blood_nocovar)
```

We can look at the distribution of our p-values using a histogram.

http://varianceexplained.org/statistics/interpreting-pvalue-histogram/

```{r}
blood_nocovar |> 
  ggplot(aes(p)) +
  geom_histogram(binwidth = 0.01)
```

This looks relatively uniform towards the right-end of the distribution, but there's quite a sharp skew towards the low end. 
This may indicate some p-value inflation due to unaccounted confounders. 

Q-Q plot: 

```{r}
blood_nocovar |> 
  arrange(p) |> 
  mutate(expected = -log10(ppoints(n())), 
         observed = -log10(p)) |> 
  # retain all p-values below 0.001
  # but only ~5% of those above that threshold
  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.05)) |> 
  ggplot(aes(expected, observed)) +
  geom_point() +
  geom_abline()
```

Inflation factor:

```{r}
median(qchisq(blood_nocovar$p, df=1, lower.tail = F), na.rm = T)/qchisq(0.5, 1)
```


We can look a distribution of our trait value across world regions and see there are differences across the continents, which will counfound the results:

```{r}
pheno <- read_tsv("data/phenotypes.tsv")
sample_info <- read_tsv("data/sample_info.tsv")

sample_info |> 
  full_join(pheno, by = c("individual_id" = "IID")) |> 
  ggplot(aes(blood, population, fill = super_pop)) +
  geom_boxplot()
```


## Correct for population structure

We now re-run the GLM, using PCA eigenvectors as covariates in the model:

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset_pca \
  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \
  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \
  --pheno data/phenotypes.tsv \
  --glm \
  --covar results/1000G_subset.eigenvec
```

We can import and visualise the new results:

```{r}
blood_pca <- read_tsv("results/1000G_subset_pca.blood.glm.linear") |> 
  clean_names()
  
# retain only the SNP test results
blood_pca <- blood_pca |> 
  filter(test == "ADD")

# histogram of p-values
blood_pca |> 
  arrange(p) |> 
  mutate(expected = -log10(ppoints(n())), 
         observed = -log10(p)) |> 
  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> 
  ggplot(aes(p)) +
  geom_histogram(binwidth = 0.01) +
  labs(title = "P-value histogram")

# qqplot
blood_pca |> 
  arrange(p) |> 
  mutate(expected = -log10(ppoints(n())), 
         observed = -log10(p)) |> 
  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> 
  ggplot(aes(expected, observed)) +
  geom_point() +
  geom_abline() + 
  labs(title = "Q-Q plot")
```

Inflation factor:

```{r}
median(qchisq(blood_pca$p, df=1, lower.tail = F), na.rm = T)/qchisq(0.5, 1)
```


## Summary

::: {.callout-tip}
#### Key Points

- TODO
:::

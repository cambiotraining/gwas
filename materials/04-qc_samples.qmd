---
pagetitle: GWAS
---

```{r setup, echo=FALSE, message=FALSE, warning=FALSE, purl=FALSE}
knitr::opts_chunk$set(error=FALSE, message=FALSE, warning=FALSE)
knitr::opts_knit$set(root.dir = "../course_files")
set.seed(123)

# load the libraries
library(tidyverse) # data manipulation
library(patchwork) # to compose plots
library(janitor)   # to clean column names
theme_set(theme_minimal()) # change default ggplot2 theme
```

# Sample QC

:::{.callout-tip}
#### Learning objectives

- List metrics that can be used for sample-level quality control and filtering.
- Use PLINK to calculate genotype call rates, heterozygosity, discordant sex and sample relatedness.
- Analyse quality metric results in R and assess the need for filtering in downstream analyses. 
- Discuss how these quality metrics are impacted by population structure. 
:::


## Per-sample metrics

Similarly to what we did for variants, we also investigate quality issues in our samples. 
We will consider the following metrics for each sample: 

- **Call rate**: Fraction of missing genotypes. Variants with a high fraction of missing data may indicate overall low quality for that sample and thus be removed from downstream analysis.
- **Heterozygosity**: The fraction of SNVs that are heterozygous in a given sample. We expect most individuals to have a mixture of both homozygous and heterozygous SNVs. Outliers may indicate genotyping errors. 
- **Relatedness**: Individuals who are related to each other (e.g. siblings, cousins, parents and children) may affect the association test results and create false positive hits. It is therefore good to assess if there are potential close family members before proceeding.  
- **Discordant sex**: In humans, we expect males to have only one X chromosome and thus no heterozygous variants, while the converse is true for females. This expectation can be used to identify potential mis-matches and correct them before proceeding.

We will cover each of these below. 
Continuing from previous chapters, we use an R session with the following packages loaded: 

```{r}
# load the libraries
library(tidyverse) # data manipulation
library(patchwork) # to compose plots
library(janitor)   # to clean column names
theme_set(theme_minimal()) # change default ggplot2 theme
```


## Call rates

Similarly to what we did for variants, we can calculate how many missing genotypes each individual sample has. 
This can then be used to assess the need to exclude samples from downstream analyses. 

There are no set rules as to what constitutes a "good call rate", but typically we may exclude samples with greater than ~5% of missing genotypes. 
This threshold may vary, however, depending on the nature of data you have. 

As we saw before, the option `--missing` generates missingness files for both samples and variants, so we don't need to re-run the PLINK command.
However, here it is as a reminder: 

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset --missing
```

For the sample missingness report the file extension is `.smiss`, which we can import into R as usual:

```{r read-smiss}
smiss <- read_tsv("results/1000G_subset.smiss") |> 
  clean_names()
  
# inspect the table
head(smiss)
```

We can tabulate how many samples have missing genotypes: 

```{r}
table(smiss$missing_ct > 0)
```

Around 20% of our samples have missing data in at least one of the variants. 

For those samples with some missing data, we can check the distribution of the fraction of missing genotypes:

```{r}
smiss |> 
  filter(f_miss > 0) |> 
  ggplot(aes(f_miss)) +
  geom_histogram()
```

From this distribution it seems that most individuals have a low fraction of missing genotypes, indicating no problematic samples. 

A filter is probably not even necessary in this case, as no sample seems to have more than 5% missing data. 
In any case, individuals with high rates of missing data, e.g. using the 5% threshold, can be excluded using PLINK's option `--mind 0.05`. 


## Heterozygosity

Another useful metric to assess issues with sample quality is to look at the fraction of variants that are heterozygous. 
In general, we expect an individual to have both homozygous and heterozygous genotypes. 

There isn't necessarily a clear value, but within a population we should expect the distribution of heterozygosity to be consistent across individuals. 
If an individual is an outlier (e.g. with too many homozygous or heterozygous sites), then we may infer some quality issues may have ocurred with that sample. 

PLINK can calculate per-sample heterozygosity rates using the option `--het`:

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset --het
```

The output file has extension `.het`, which we can import into R:

```{r read-het}
het <- read_tsv("results/1000G_subset.het") |> 
  clean_names()

head(het)
```

We can make a histogram of the fraction of homozygous individuals:

```{r plot-het}
het |> 
  ggplot(aes(f)) +
  geom_histogram()
```

This gives a very suspicious distribution. 
We clearly have different groups of samples, some with higher rates of homozygosity and others with lower rates. 

This is likely a consequence of the fact we have individuals from different populations (geographic areas). 
This is an issue we will come back to in the **population structure** chapter. 

For now, it is clear that we cannot easily filter samples based on their heterozygosity, as the populations are heterogeneous. 


## Sample relatedness

One other thing that can be considered is whether there are potential relationships within your samples. 
In our dataset all samples are supposed to be unrelated. 

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset --maf 0.1 --make-king triangle
```

This command outputs files in different format to other commands we've seen so far.
Two complementary files are generated with extensions `.king` and `.king.ids`. 
The first file is a triangular matrix with pairwise kinship metrics for each pair of individuals. The second file contains the sample IDs, which effectively corresponds to the row and column names of this matrix. 

We can see the top few rows of the matrix: 

```bash
head -n 5 results/1000G_subset.king
```

Importing this into R is slightly more work, and we will do a bit more data wrangling to get it into a suitable format for plotting and exploratory analysis. 

```{r}
# read the IDs and pull them to a standard vector
king_ids <- read_tsv("results/1000G_subset.king.id") |>
  clean_names() |> 
  pull(iid)

# we use standard read.table as it provides the fill option
king <- read.table("results/1000G_subset.king", 
                   fill = TRUE, 
                   col.names = king_ids)

# convert to long format
king <- king |> 
  # add column with "row" IDs
  mutate(id1 = king_ids) |> 
  # reshape to "long" format
  pivot_longer(-id1, 
               names_to = "id2", 
               values_to = "kinship") |> 
  drop_na(kinship)
  
head(king)
```

For each pair of samples we now have the kinship metric calculated using the KING method. 
The authors of this method indicate that unrelated individuals should have a kinship coefficient of zero, but they recommend using a threshold of ~0.044 (cf. Table 1 in [Manichaikul et al. 2010](https://doi.org/10.1093/bioinformatics/btq559)).

We can check how many individuals are above this threshold:

```{r}
table(king$kinship > 0.044)
```

Only `r sum(king$kinship > 0.044)` individuals are above this threshold. 
We can also look at the distribution of this kinship coefficient:

```{r}
king |> 
  ggplot(aes(kinship)) +
  geom_histogram(bins = 100) +
  geom_vline(xintercept = 1/16)
```

Similar to what we've seen before for heterozygosity, we get a multi-modal distribution of kinship values.
This is again likely because of **population structure**, i.e. the fact that our samples come from different geographic areas and thus may have differing base levels of "residual relatedness". 

However, we can see all most values are negative, which can happen with this coefficient and essentially indicates no relatedness between individuals. 

More worringly, we can see some individuals seem closely related if we sort the table in descending order of kinship and look at the top few rows:

```{r}
king |> 
  arrange(desc(kinship)) |> 
  head(n = 15)
```

We see a few individuals have a kinship coefficient of ~1/4, which is indicative of full siblings.
Others are close to ~1/8 (second degree relationships, e.g. cousins) and a few close to ~1/16 (third degree relationship). 

To eliminate close relationships from downstream analysis, we can use PLINK's option `--king-cutoff 0.125` to eliminate at least second degree relationships.

<!-- 
## Discordant sex
-->


## Summary

::: {.callout-tip}
#### Key Points

- TODO
:::

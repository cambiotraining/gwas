---
pagetitle: GWAS
---

```{r setup, echo=FALSE, message=FALSE, warning=FALSE, purl=FALSE}
knitr::opts_chunk$set(error=FALSE, message=FALSE, warning=FALSE)
knitr::opts_knit$set(root.dir = "../course_files")
set.seed(123)
```

# Sample QC

:::{.callout-tip}
#### Learning objectives

- List metrics that can be used for sample-level quality control and filtering.
- Use PLINK to calculate genotype call rates, heterozygosity, discordant sex and sample relatedness.
- Analyse quality metric results in R and assess the need for filtering in downstream analyses. 
- Discuss how these quality metrics are impacted by population structure. 
:::


## Per-sample metrics

Similarly to what we did for variants, we also investigate quality issues in our samples. 
We will consider the following metrics for each sample: 

- **Call rate**: Fraction of missing genotypes. Variants with a high fraction of missing data may indicate overall low quality for that sample and thus be removed from downstream analysis.
- **Heterozygosity**: The fraction of SNVs that are heterozygous in a given sample. We expect most individuals to have a mixture of both homozygous and heterozygous SNVs. Outliers may indicate genotyping errors. 
- **Relatedness**: Individuals who are related to each other (e.g. siblings, cousins, parents and children) may affect the association test results and create false positive hits. It is therefore good to assess if there are potential close family members before proceeding.  
- **Discordant sex**: In humans, we expect males to have only one X chromosome and thus no heterozygous variants, while the converse is true for females. This expectation can be used to identify potential mis-matches and correct them before proceeding.

We will cover each of these below. 

:::{.callout-important}
#### Set up your R session

If you haven't done so already, start an R session with the following packages loaded: 

```{r load-packages}
# load the libraries
library(tidyverse) # data manipulation
library(patchwork) # to compose plots
library(janitor)   # to clean column names
theme_set(theme_minimal()) # change default ggplot2 theme
```

:::


## Call rates

Similarly to what we did for variants, we can calculate how many missing genotypes each individual sample has. 
This can then be used to assess the need to exclude samples from downstream analyses. 

There are no set rules as to what constitutes a "good call rate", but typically we may exclude samples with greater than ~5% of missing genotypes. 
This threshold may vary, however, depending on the nature of data you have. 

As we saw before, the option `--missing` generates missingness files for both samples and variants, so we don't need to re-run the PLINK command.
However, here it is as a reminder: 

```bash
plink2 \
  --pfile data/plink/1000G_subset \
  --out results/1000G_subset \
  --missing
```

For the sample missingness report the file extension is `.smiss`, which we can import into R as usual:

```{r smiss-read}
smiss <- read_tsv("results/1000G_subset.smiss") |> 
  clean_names(replace = c("#" = ""))
  
# inspect the table
head(smiss)
```

We can tabulate how many samples have missing genotypes: 

```{r smiss-tabulate}
table(smiss$missing_ct > 0)
```

Around `r round(mean(smiss$missing_ct > 0)*100)`% of our samples have missing data in at least one of the variants. 

For those samples with some missing data, we can check the distribution of the fraction of missing genotypes:

```{r smiss-hist}
smiss |> 
  filter(f_miss > 0) |> 
  ggplot(aes(f_miss)) +
  geom_histogram()
```

From this distribution it seems that most individuals have a low fraction of missing genotypes, indicating no problematic samples. 

A filter is probably not even necessary in this case, as no sample seems to have more than 5% missing data. 
In any case, individuals with high rates of missing data, e.g. using the 5% threshold, can be excluded using PLINK's option `--mind 0.05`. 


## Heterozygosity and inbreeding

Another useful metric to assess issues with sample quality is to look at the fraction of variants that are heterozygous, or conversely what the **inbreeding coefficient** of each individual is. 
In general, we expect an individual to have both homozygous and heterozygous genotypes. 
Individuals with high heterozygosity may represent poor quality samples (e.g. contaminated samples composed of a mixture of DNA from two individuals). 
Conversely, individuals with high homozygosity may indicate inbreeding, which can impact the balance of allele frequencies in the population (as discussed in the [Hardy-Weinberg equilibrium section](03-qc_variants.qmd#hardyâ€“weinberg)) and potentially bias the results of our association tests. 

There isn't necessarily a clear value, but within a population we should expect the distribution of heterozygosity to be consistent across individuals. 
If an individual is an outlier (e.g. with too many homozygous or heterozygous sites), then we may infer some quality issues may have ocurred with that sample. 

PLINK can calculate per-sample heterozygosity rates using the option `--het`:

```bash
plink2 \
  --pfile data/plink/1000G_subset \
  --out results/1000G_subset \
  --extract results/1000G_subset.prune.in \
  --geno 0.05 --maf 0.01 --mind 0.05 \
  --het
```

In this command we also apply the variant filters defined in the [variant QC section](03-qc_variants.qmd). 
Namely, retaining genotypes and samples with a call rate of at least 95% (`--geno 0.05 --mind 0.05`) and minor allele frequency of at least 1% (`--maf 0.01`).
And use the `--extract` option to only include uncorrelated variants, obtained by LD prunning.

The output file has extension `.het`, which we can import into R:

```{r het-read}
het <- read_tsv("results/1000G_subset.het") |> 
  clean_names(replace = c("#" = ""))

head(het)
```

We have four values for each individual: 

- `o_hom` is the number of observed homozygous genotypes.
- `e_hom` is the expected number of homozygous genotypes, based on the allele frequencies in the population and under Hardy-Weinberg equilibrium (HWE).
- `obs_ct` is the number of non-missing genotypes.
- `f` is the inbreeding coefficient, which represent the individual heterozygosity relative to the expectation under HWE (see box below for details on its calculation). 

:::{.callout-note collapse="true"}
#### Inbreeding coefficient calculation

Let's call $H_{obs}$ the observed fraction of heterozygote variants in an individual and $H_{exp}$ the expected heterozygosity under Hardy-Weinberg equilibrium (HWE).

The inbreeding coefficient is usually defined as:

$$
F = 1 - \frac{H_{obs}}{H_{exp}}
$$

I.e., it is the difference between the expected and observed heterozygosity, divided by the expected heterozygosity.

- A value of 0 would indicate that the individual is heterozygous at the expected rate, since $H_{obs} = H_{exp}$.
- A value of 1 would indicate that the individual is completely homozygous, since $H_{obs} = 0$.
- If $H_{obs} < H_{exp}$, then the inbreeding coefficient will be between 0 and 1, indicating different levels of homozygosity or inbreeding.
- If $H_{obs} > H_{exp}$, then the individual is more heterozygous than expected under HWE and the inbreeding coefficient takes negative values.

Rather than reporting the observed and expected heterozygosity, PLINK reports things as counts of homozygous variants. 
Because all of these can be calculated from each other, we can rearrange the equation above to express the inbreeding coefficient in terms of the number of homozygous genotypes.

Let's call $O_{hom}$ the number of observed homozygous genotypes, $E_{exp}$ the number of expected homozygous genotypes and $O_{total}$ the total number of variants.
Then, the equation above could be written as:

$$
F = 1 - \frac{O_{total} - O_{hom}}{O_{total} - E_{hom}}
$$

Which we can further rearrange to:

$$
F = \frac{O_{hom} - E_{hom}}{O_{total} - E_{hom}}
$$

We can confirm this is how PLINK calculates the inbreeding value:

```{r inbreeding-coefficient}
het |> 
  mutate(f2 = (o_hom - e_hom) / (obs_ct - e_hom))
```

:::

Let's consider the distribution of inbreeding coefficients for the individuals in our sample. 
A value of 0 indicates that the individual is heterozygous at the expected rate, while a value of 1 indicates that the individual is completely homozygous.
Negative values indicate that the individual is more heterozygous than expected under HWE.

We can make a histogram of the inbreeding coefficient:

```{r het-histogram}
het |> 
  ggplot(aes(f)) +
  geom_histogram()
```

In general we can see there are no individuals with very extreme inbreeding values (e.g. close to 1). 
We can see some individuals with slightly negative values, indicating they are more heterozygous than expected under HWE.

The main issue we see is that the distribution is multi-modal.
This indicates that we have different groups of samples, some with higher rates of inbreeding and others with lower rates. 

This is likely a consequence of the fact we have individuals from different populations (geographic areas). 
This is an issue we will come back to in the **population structure** chapter. 

For now, it is clear that we cannot easily filter samples based on their heterozygosity, as the populations are heterogeneous. 

<!-- 
### Stratifying the analysis by population

Ideally, we should calculate the inbreeding coefficient separately for each population, as the HWE assumes that the population is homogenous.
We can do this by using the `--keep-if` option in PLINK, which allows us to specify a condition on which to keep individuals.

If we examine our `.psam` file, we can see that the population is specified in the last column and a "super population" in the third column:

```bash
head -n 5 data/plink/1000G_subset.psam
```

```
#IID     SEX  SuperPop  Population
HG00097  2    EUR       GBR
HG00107  1    EUR       GBR
HG00108  1    EUR       GBR
HG00109  1    EUR       GBR
```

We can see how many individuals we have in each population (country):

```bash
tail -n +2 data/plink/1000G_subset.psam | cut -f 4 | sort | uniq -c
```

```
37 ACB
22 ASW
43 BEB
34 CDX
40 CEU

... more lines ommitted ...
```

And in each continent (super population):

```bash
tail -n +2 data/plink/1000G_subset.psam | cut -f 3 | sort | uniq -c
```

```
273 AFR
140 AMR
207 EAS
208 EUR
209 SAS
```

As we have less than 100 individuals in each country, let's focus on the super populations and hope that those are more homogenous than the entire population of samples.
For example, to calculate the inbreeding coefficient for individuals from the EUR population, we can use the following command:

```bash
plink2 \
  --pfile data/plink/1000G_subset \
  --out results/1000G_subset_EUR \
  --keep-if "SuperPop == EUR" \
  --extract results/1000G_subset.prune.in \
  --geno 0.05 --maf 0.01 --mind 0.05 \
  --het
```

Let's consider the distribution of inbreeding coefficients for this population:

```{r het-histogram-eur}
het_eur <- read_tsv("results/1000G_subset_EUR.het") |> 
  clean_names(replace = c("#" = ""))
het_eur |>
  ggplot(aes(f)) +
  geom_histogram() +
  labs(title = "Inbreeding coefficient for EUR individuals")
```

Ah, that's better!
We can see that the distribution is now centred at zero with a reasonably normal distribution.
We can see some individuals who migth be potential outliers, which we will exclude after considering the other populations. 

Here is how we could automate the process of calculating the inbreeding coefficient for all populations:

```bash
# get the list of populations
populations=$(tail -n +2 data/plink/1000G_subset.psam | cut -f 3 | sort | uniq)

# loop over the populations
for pop in $populations; do
  plink2 \
    --pfile data/plink/1000G_subset \
    --out results/1000G_subset_${pop} \
    --keep-if "SuperPop == ${pop}" \
    --extract results/1000G_subset.prune.in \
    --geno 0.05 --maf 0.01 --mind 0.05 \
    --het
done
```

```{r all-het-histogram}
# read all files
het_all <- read_tsv(list.files("results", pattern = "1000G_subset_.*.het", full.names = TRUE)) |> 
  clean_names(replace = c("#" = ""))

het_all |>
  ggplot(aes(f)) +
  geom_histogram(binwidth = 0.01) +
  labs(title = "Inbreeding coefficient for all individuals")
```

This is a very nice distribution, with most individuals having an inbreeding coefficient close to zero.
We can see some individuals with very high inbreeding coefficients, which we can consider as outliers.

We can remove outliers by retaining only individuals with an inbreeding coefficient within 3 standard deviations from the mean.

```{r het-outliers}
het_all |> 
  filter(f > mean(f) - 3*sd(f) & f < mean(f) + 3*sd(f)) |> 
  ggplot(aes(f)) +
  geom_histogram(binwidth = 0.01) +
  labs(title = "Inbreeding coefficient for all individuals (outliers removed)")
``` 
-->


## Sample relatedness

One other thing that can be considered is whether there are potential relationships within your samples. 
In our dataset all samples are supposed to be unrelated. 

```bash
plink2 \
  --pfile data/plink/1000G_subset \
  --out results/1000G_subset \
  --extract results/1000G_subset.prune.in \
  --geno 0.05 --maf 0.01 --mind 0.05 \
  --make-king-table
```

This outputs a file with format `.kin0`, which contains pairwise kinship coefficients for each pair of samples. 
We can read this table into R as usual:

```{r king-read}
king <- read_tsv("results/1000G_subset.kin0") |> 
  clean_names(replace = c("#" = ""))
  
head(king)
```

For each pair of samples we now have the kinship coefficient calculated using the KING method. 
The authors of this method indicate that unrelated individuals should have a kinship coefficient of zero, but they recommend using a threshold of ~0.044 (cf. Table 1 in [Manichaikul et al. 2010](https://doi.org/10.1093/bioinformatics/btq559)).

We can check how many individuals are above this threshold:

```{r king-tabulate}
table(king$kinship > 0.044)
```

Only `r sum(king$kinship > 0.044)` individuals are above this threshold. 
We can also look at the distribution of this kinship coefficient:

```{r king-histogram}
king |> 
  ggplot(aes(kinship)) +
  geom_histogram(bins = 100) +
  geom_vline(xintercept = 1/16)
```

Similar to what we've seen before for heterozygosity, we get a multi-modal distribution of kinship values.
This is again likely because of **population structure**, i.e. the fact that our samples come from different geographic areas and thus may have differing base levels of "residual relatedness". 

However, we can see all most values are negative, which can happen with this coefficient and essentially indicates no relatedness between individuals. 

More worringly, we can see some individuals seem closely related if we sort the table in descending order of kinship and look at the top few rows:

```{r king-arrange}
king |> 
  arrange(desc(kinship)) |> 
  head(n = 15)
```

We see a few individuals have a kinship coefficient of ~1/4, which is indicative of full siblings.
Others are close to ~1/8 (second degree relationships, e.g. cousins) and a few close to ~1/16 (third degree relationship). 

To eliminate close relationships from downstream analysis, we can use PLINK's option `--king-cutoff 0.125` to eliminate at least second degree relationships.

<!-- 

NOTE: I initially didn't realise there was a `--make-king-table` option already available. 
NOTE: kept this here for reference

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset --geno 0.05 --maf 0.01 --mind 0.05 --make-king triangle
```

This command outputs files in different format to other commands we've seen so far.
Two complementary files are generated with extensions `.king` and `.king.ids`. 
The first file is a triangular matrix with pairwise kinship metrics for each pair of individuals. The second file contains the sample IDs, which effectively corresponds to the row and column names of this matrix. 

We can see the top few rows of the matrix: 

```bash
head -n 5 results/1000G_subset.king
```

Importing this into R is slightly more work, and we will do a bit more data wrangling to get it into a suitable format for plotting and exploratory analysis. 

```r
# read the IDs and pull them to a standard vector
king_ids <- read_tsv("results/1000G_subset.king.id") |>
  clean_names() |> 
  pull(iid)

# we use standard read.table as it provides the fill option
king <- read.table("results/1000G_subset.king", 
                   fill = TRUE, 
                   col.names = king_ids)

# convert to long format
king <- king |> 
  # add column with "row" IDs
  mutate(id1 = king_ids) |> 
  # reshape to "long" format
  pivot_longer(-id1, 
               names_to = "id2", 
               values_to = "kinship") |> 
  drop_na(kinship)
  
head(king)
``` 

-->


## Discordant sex

:::{.callout-caution}
#### Work in progress 

Sorry, this section isn't yet finished. 
There's a brief explanation below, but we are still working on having data suitable to demonstrate this analysis. 
:::

Another thing that can be checked is whether the sex assigned to each of our samples is correct, based on the genetic data. 
This relies on having genotypes in a sex chromosome and checking whether the heterozygosity matches the expectation. 
For example, in humans males have one copy of the X chromosome, and females two. 
Therefore, all males should be homozygous for variants in the X chromosome, whereas females may have a mixture of heterozygous and homozygous sites. 

We can do this quality check using PLINK's `--check-sex` option: 

```bash
plink2 --pfile data/plink/1000G_subset --out results/1000G_subset --check-sex
```

Unfortunately this does now work in our example data, as we are missing genotypes on the X chromosome. 


## Summary

::: {.callout-tip}
#### Key Points

- Key metrics for sample-level quality control include: call rate, heterozygosity, relatedness and sex assignment. 
- Call rates (`--missing`): samples with low call rates (e.g. <95% or >5% missing genotypes) are typically excluded. 
  - To remove samples missing genotypes above a certain threshold use `--mind X` (replace `X` with the desired fraction, e.g. 0.05). 
- Heterozygosity (`--het`): samples that are outlier with regards to the number of heterozygous variants relative to other samples are typically excluded as they may represent errors (e.g. mixed samples or genotyping errors). 
  - It is common practice to remove samples a certain number of standard deviations away from the observed distribution (e.g. +/- 3 SDs). 
  - However, this should only be applied to samples from relatively homogenous populations, as different sub-populations may have different distributions. 
- Sample relatedness (`--king`): even when individuals are thought to be unrelated, there may be some criptic relatedness that was previously unknown. Excluding very close relatives is best-practice to avoid biasing downstream association tests.
  - To exlude individuals above a certain kinship score threshold use `--king-cutoff X` (replace `X` with the desired threshold). Common thresholds include 1/4 for full siblings, 1/8 for second degree relatives and 1/16 for third degree relatives. 
- Discordant sex (`--check-sex`): it is good practice to check if the sex assigned to the individual (specified in the `.psam`/`.fam` file) matches the sex from genetic data. This can be determined from genotypes in the sex chromosomes. Individual with discordant sex may either be corrected or removed from the analysis. 
:::

{
  "hash": "7289f7bb24513ec98c986dfbd82aa44e",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Quality control\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Become familiar with the PLINK software and its file formats.\n- Use PLINIK for quality control of genotype data.\n- Identify population structure confounders.\n:::\n\n\n## Example data\n\nWe will use simulated traits, based on real GWAS results on continuous and binary traits: \n\n- Binary trait: type 2 diabetes , study accession [GCST006801](https://www.ebi.ac.uk/gwas/studies/GCST006801).\n- Binary trait: chronotype (\"morning person\"), study accession [GCST007565](https://www.ebi.ac.uk/gwas/studies/GCST007565). \n- Continuous trait: caffeine consumption (\"mg/day\"), study accession [GCST001032](https://www.ebi.ac.uk/gwas/studies/GCST001032).\n- Continuous trait: blood pressure (mm Hg) study accession [GCST001235](https://www.ebi.ac.uk/gwas/studies/GCST001235)\n\nThe genotype data we are using is from the [1000 Genomes project](https://www.internationalgenome.org/), specifically the [30x data](https://www.internationalgenome.org/data-portal/data-collection/30x-grch38) from [Byrska-Bishop et al. (2022)](https://doi.org/10.1016/j.cell.2022.08.004).\n\nWe have down-sampled the SNVs, to retain ~6M out of the ~70M available.\n\n## Working with `plink`\n\nThe PLINK software provides many utilities to work with genotype data. \nThe most common input file formats used by PLINK, which are also supported by other related GWAS analysis tools are the BED/BIM/FAM trio of files:\n\nTODO: briefly explain the formats\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal())\n```\n:::\n\n\n\n\n### Running `plink`\n\nPLINK has many functions available, but we will start with a simple one that calculates the minor allele frequency for each of our variants: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --freq\n```\n\nYou can see the structure of the command is: \n\n- `plink`: the name of the program.\n- `--pfile`: input file name **prefix**. PLINK will then look for files with `.pgen`, `.psam` and `.pvar` extensions that all share the prefix specified here. \n- `--freq`: option to calculate allele frequencies, detailed in [the documentation](https://www.cog-genomics.org/plink/2.0/basic_stats#freq).\n- `--out`: output file name **prefix**. PLINK will generate all the output files with this common prefix and a file extension specific to each command. In this example we only get an allele frequency file (detailed below). You can omit this option, in which case PLINK will output the files to the same directory as specified with `--pfile`. However, it's good practice to keep our results files separate from the original raw data.\n\nMost PLINK analysis options output their results to a file with an extension that is specific to that option.\nIn the example of the `--freq` option, it outputs a file with `.afreq` extension. \nThis is detailed in detailed in [the documentation](https://www.cog-genomics.org/plink/2.0/basic_stats) of each option.\n\nThese files are standard text files with **tab-separated values (TSV)**, and therefore can be read and analysed in R or Python. \nFor example, below we read the `.afreq` file produced by the previous command and make a histogram of allele frequencies in our population.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the allele frequency file\nafreq <- read_tsv(\"results/1000G_subset.afreq\") |> \n  # PLINK's column names are always upppercase\n  # this makes them lowercase, easier to type\n  clean_names()\n\n# inspect the file\nhead(afreq)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  number_chrom id    ref   alt   alt_freqs obs_ct\n         <dbl> <chr> <chr> <chr>     <dbl>  <dbl>\n1            1 .     G     A       0.0775    1806\n2            1 .     A     G       0.315     1806\n3            1 .     A     T       0.00332   1806\n4            1 .     T     G       0         1806\n5            1 .     C     G       0.00443   1806\n6            1 .     G     A       0.119     1806\n```\n\n\n:::\n\n```{.r .cell-code}\n# plot a histogram of reference allele frequencies\nafreq |> \n  ggplot(aes(alt_freqs)) +\n  geom_histogram(binwidth = 0.01)\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# add a column of minor allele frequency\nafreq <- afreq |> \n  mutate(maf = ifelse(alt_freqs > 0.5, 1 - alt_freqs, alt_freqs)) \n\n# MAF histogram\nafreq |> \n  ggplot(aes(maf)) +\n  geom_histogram(binwidth = 0.01)\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# summary quantiles\nsummary(afreq$maf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0000000 0.0000000 0.0005537 0.0219653 0.0022148 0.5000000 \n```\n\n\n:::\n:::\n\n\n\n\nWe can see many SNPs have very low frequency. \nIn fact, some of them are not variable at all in our population of samples!\nWe can quickly tabulate how many SNPs are above the commonly-used 1% threshold of allele frequency: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(afreq$alt_freqs > 0.01)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  FALSE    TRUE \n4772395  806181 \n```\n\n\n:::\n:::\n\n\n\n\nIt seems like we will have to do some filtering before proceesing with our analysis...\n\n:::{.callout-exercise}\n#### Missing data \n\n- Look at [PLINK's documentation](https://www.cog-genomics.org/plink/2.0/basic_stats) to find the option that calculates sample-based and variant-based missing data reports. \n- Run PLINK with that option, saving the output with prefix `results/1000G_subset`. \n- Look at the top lines of the output files from the terminal (using `head`), to see if you understand their structure. \n  You can also consult PLINK's [file format documentation](https://www.cog-genomics.org/plink/2.0/formats). \n- Import both tables into R and use the `summary()` function to investigate the range of missingness across samples and variants.\n\n:::{.callout-answer}\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --missing\n```\n\nThis generates two files with extension `.smiss` (for sample-missingness report) and `.vmiss` (for variant-missingness report).\nWe import both of these into our R session:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmiss <- read_tsv(\"results/1000G_subset.smiss\") |> \n  clean_names()\n  \nvmiss <- read_tsv(\"results/1000G_subset.vmiss\") |> \n  clean_names()\n```\n:::\n\n\n\n\nWe now explore how many samples have missing genotypes: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmiss |> filter(missing_ct > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 904 × 5\n   number_fid iid     missing_ct  obs_ct f_miss\n   <chr>      <chr>        <dbl>   <dbl>  <dbl>\n 1 HG00096    HG00096     167306 5578576 0.0300\n 2 HG00097    HG00097     167061 5578576 0.0299\n 3 HG00099    HG00099     167502 5578576 0.0300\n 4 HG00100    HG00100     166912 5578576 0.0299\n 5 HG00101    HG00101     167329 5578576 0.0300\n 6 HG00102    HG00102     168122 5578576 0.0301\n 7 HG00103    HG00103     167619 5578576 0.0300\n 8 HG00105    HG00105     167770 5578576 0.0301\n 9 HG00106    HG00106     167306 5578576 0.0300\n10 HG00107    HG00107     166701 5578576 0.0299\n# ℹ 894 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nvmiss |> filter(missing_ct > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,113,300 × 5\n   number_chrom id    missing_ct obs_ct  f_miss\n          <dbl> <chr>      <dbl>  <dbl>   <dbl>\n 1            1 .             22    904 0.0243 \n 2            1 .             83    904 0.0918 \n 3            1 .            172    904 0.190  \n 4            1 .             14    904 0.0155 \n 5            1 .            202    904 0.223  \n 6            1 .              7    904 0.00774\n 7            1 .             55    904 0.0608 \n 8            1 .            209    904 0.231  \n 9            1 .             17    904 0.0188 \n10            1 .            252    904 0.279  \n# ℹ 1,113,290 more rows\n```\n\n\n:::\n:::\n\n\n\n\n:::\n:::\n\n## Hardy–Weinberg\n\nAnother quality control step is to check whether SNPs significantly deviate from Hardy-Weinberg equilibrium, which is expected if individuals mate randomly. \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --maf 0.01 --hardy\n```\n\nThis outputs a file with `.hardy` extension, which we can read into R: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhardy <- read_tsv(\"results/1000G_subset.hardy\") |> \n  clean_names()\n\nhardy |> \n  # randomply sample SNPs to avoid plots crashing\n  sample_n(10e3) |> \n  ggplot(aes(e_het_a1, o_het_a1)) + \n  geom_point(aes(colour = p < 0.001)) +\n  geom_abline() +\n  labs(x = \"Expected heterozygosity\", y = \"Observed heterozygosity\")\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nFrom this plot we can see that there seems to be an excess of SNPs with **lower heterozygosity** than expected, compared to those with higher heterozygosity. \nThis is because of population structure: our samples do not come from a homogenous randomly mating population.\n\nTODO: explain Wahlund effect and maybe make some ternary plots with HWTernaryPlot.\n\n\n:::{.callout-tip}\n#### Tip: Running multiple options at once\n\nWe have seen 3 PLINK commands that are useful for checking properties of our genotype data: \n\n- `--freq` to assess the allele frequency across SNPs.\n- `--missing` to assess genotype missingness both across SNPs and samples.\n- `--hardy` to assess genotype frequency deviations from the Hardy-Weinberg equilibrium expectation. \n\nSo far, we have run each of these options individually, however you can run multiple options simultaneously. \nFor example, our previous analyses could have been run with a single command: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --freq --hardy --missing\n```\n\nThis would produce all three respective results files in one go. \n:::\n\n\n## Population structure\n\nBased on our previous exploratory analysis, we apply two filters in this analysis: \n\n- Minor allele frequency above 1%.\n- Hardy-Weinberg equilibrium p-value above 0.001.\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset \\\n  --maf 0.01 --hwe 0.001 keep-fewhet --pca\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvec <- read_tsv(\"results/1000G_subset.eigenvec\") |> \n  clean_names()\n\neigenvec |> \n  ggplot(aes(pc1, pc2)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\neigenval <- read_tsv(\"results/1000G_subset.eigenval\",\n                     col_names = \"eigenval\")\n\neigenval <- eigenval |> \n  mutate(pc = 1:n(),\n         var = eigenval/sum(eigenval))\n\neigenval |> \n  ggplot(aes(pc, var)) +\n  geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsample_info <- read_tsv(\"data/sample_info.tsv\")\n\neigenvec |> \n  left_join(sample_info, by = c(\"iid\" = \"individual_id\")) |> \n  ggplot(aes(pc1, pc2, colour = super_pop)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](01-qc_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- TODO\n:::\n",
    "supporting": [
      "01-qc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
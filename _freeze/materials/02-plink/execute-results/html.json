{
  "hash": "78c192a5828a2b88c56d126d1117457d",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# PLINK basics\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Recognise how the PLINK software can be used for GWAS analysis.\n- List the file formats required by PLINK.\n- Recognise the general structure of a PLINK command and the structure of the output files it generates.\n- Use R to import, explore and visualise the results generated by PLINK. \n:::\n\n\n## The PLINK software\n\nThe PLINK software provides an extensive toolkit for genome wide association analysis. \nAmongst its many functions, it includes:\n\n- Calculation of **basic statistics** such as genotype counts, allele frequencies, missing data, measures of inbreeding, checking sex assignment.\n- Measures of **linkage disequilibrium** between variants and **genetic relatedness** between samples.\n- Assessment of population stratification using **principal components analysis**. \n- Perform **association tests** using generalised linear models between genotypes and quantitative or binary traits.\n\nPLINK has been designed to work with large data, being highly efficient and take advantage of multiple processors (CPUs) to run tasks in parallel. \n\nIt has [excellent documentation](https://www.cog-genomics.org/plink/2.0/), which goes into great details about its functions and both input and output file formats. \n\nPLINK version 2 is still under active development and many of its functions have been updated from PLINK version 1 to deal with ever increasing amounts of data. \nWhile most of the functions have been ported from PLINK 1 to PLINK 2, some functionality may still be missing from the more recent version. \nWe will use **PLINK 2** throughout these materials, but it is worth being aware that some functions may only be available on the older version. \n\n\n## PLINK input files\n\nPLINK requires three types of input files: genotypes, variant information and sample information. \nWith version 2 of PLINK new file formats for these files were implemented, however PLINK 2 supports both the new and older file format versions. \n\n| Description                         | PLINK 1 Format | PLINK 2 Format |\n|-------------------------------------|---------------|---------------|\n| **Genotypes** stored in a binary (compressed) file format. | `.bed` | `.pgen` |\n| **Variant information** file containing chromosome, position, reference, and alternative alleles for each variant. | `.bim` | `.pvar` |\n| **Sample information** file specifying sample IDs, parents (if known), and sex (if known). Family IDs are used for related individuals, while they can be set to missing for unrelated individuals. | `.fam` | `.psam` |\n\n:::{.callout-warning}\n#### Don't get your BED files confused\n\nThe `.bed` format used by PLINK 1 is distinct from the [BED (Browser Extensible Data) format](https://en.wikipedia.org/wiki/BED_(file_format)) often used in bioinformatics to represent the coordinates of genomic features (e.g. genes). \n\nThese are completely different files, which unfortunately ended up being referred to by the same file extension.\nThat is one reason why the newer PLINK 2 now uses the more distinct `.pgen` extension for its genotype file.\n:::\n\n\n### Example data\n\nIn these materials we use genotype data from the [1000 Genomes project](https://www.internationalgenome.org/), specifically the [30x data](https://www.internationalgenome.org/data-portal/data-collection/30x-grch38) described in [Byrska-Bishop et al. (2022)](https://doi.org/10.1016/j.cell.2022.08.004).\nWe have down-sampled the SNVs, to retain ~6M out of the ~70M available.\n\nVariants calls are often stored as [VCF (Variant Call Format)](https://en.wikipedia.org/wiki/Variant_Call_Format) files (cf. the [data on the 1000G server](http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000G_2504_high_coverage/working/20201028_3202_raw_GT_with_annot/)). \nPLINK allows us to convert VCF files into its required input formats using the `--make-pgen` (PLINK 2 format) or `--make-bed` (PLINK 1 format) options.\n\nWe already provide a set of `.pgen`/`.bed`, `.pvar`/`.bim` and `.psam`/`.fam` files based on the publicly-available data.\n\nIn addition to genotype data, we will use simulated traits, based on real GWAS results on quantitate and binary traits: \n\n- Binary trait: type 2 diabetes , study accession [GCST006801](https://www.ebi.ac.uk/gwas/studies/GCST006801).\n- Binary trait: chronotype (\"morning person\"), study accession [GCST007565](https://www.ebi.ac.uk/gwas/studies/GCST007565). \n- Quantitative (continuous) trait: caffeine consumption (\"mg/day\"), study accession [GCST001032](https://www.ebi.ac.uk/gwas/studies/GCST001032).\n- Quantitative (continuous) trait: blood pressure (mm Hg) study accession [GCST001235](https://www.ebi.ac.uk/gwas/studies/GCST001235)\n\n\n## Working with `plink`\n\nPLINK has many functions available, but we will start with a simple one that calculates allele frequencies for each of our variants: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --freq\n```\n\nYou can see the structure of the command is: \n\n- `plink`: the name of the program.\n- `--pfile`: input file name **prefix**. PLINK will then look for files with `.pgen`, `.psam` and `.pvar` extensions that all share the prefix specified here. \n- `--freq`: option to calculate allele frequencies, detailed in [the documentation](https://www.cog-genomics.org/plink/2.0/basic_stats#freq).\n- `--out`: output file name **prefix**. PLINK will generate all the output files with this common prefix and a file extension specific to each command. In this example we only get an allele frequency file (detailed below). You can omit this option, in which case PLINK will output the files to the same directory as specified with `--pfile`. However, it's good practice to keep our results files separate from the original raw data.\n\nMost PLINK analysis options output their results to a file with an extension that is specific to that option.\nIn the example of the `--freq` option, it outputs a file with `.afreq` extension. \nThis is detailed in [the documentation](https://www.cog-genomics.org/plink/2.0/basic_stats) of each option.\n\n\n## Analysing PLINK files in R\n\nPLINK's output files are standard text files, usually consisting of tables with **tab-separated values (TSV)**. \nTherefore, they can be read and analysed in R (or Python, if you prefer). \n\nLet's start our analysis in R by loading some packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\nWe now read the `.afreq` file produced by the PLINK command we ran earlier:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the allele frequency file\nafreq <- read_tsv(\"results/1000G_subset.afreq\") |> \n  # PLINK's column names are always upppercase\n  # this makes them lowercase, easier to type\n  clean_names()\n\n# inspect the file\nhead(afreq)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 6\n  number_chrom id    ref   alt   alt_freqs obs_ct\n         <dbl> <chr> <chr> <chr>     <dbl>  <dbl>\n1            1 .     G     A       0.0775    1806\n2            1 .     A     G       0.315     1806\n3            1 .     A     T       0.00332   1806\n4            1 .     T     G       0         1762\n5            1 .     C     G       0.00443   1806\n6            1 .     G     A       0.119     1806\n```\n\n\n:::\n:::\n\n\n\n\nWe used the `read_tsv()` function, which imports tab-separated files as a data frame, followed by the `clean_names()` function (from the `janitor` package) to conveniently convert the column names to lowercase (it also removes spaces and other special characters, if present).\n\nWe can now use this data frame to produce a histogram of the allele frequencies in our population, using standard `ggplot2` functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot a histogram of alternative allele frequencies\nafreq |> \n  ggplot(aes(alt_freqs)) +\n  geom_histogram(binwidth = 0.01)\n```\n\n::: {.cell-output-display}\n![](02-plink_files/figure-html/plot-af-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can see many variants with a frequency close to zero for the alternative allele, indicating a high fraction of missing genotypes. \nWe will likely need to do some filtering before proceeding with our analysis, which is the topic of the next chapters. \n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- TODO\n:::\n",
    "supporting": [
      "02-plink_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
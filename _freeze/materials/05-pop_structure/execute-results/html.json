{
  "hash": "c7a90b0a462f3fe1721e9a119b45b542",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Population structure\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Define what is meant by population structure and how it may confound GWAS results. \n- Run Principal Components Analysis (PCA) on genetic data to investigate if individuals cluster based on genetic similarity.\n- Visualise the PCA results together with sample metadata such as geographic region.\n:::\n\n\n## Population stratification\n\nPopulations from different geographic regions may genetically diverge from each other due to evolutionary processes such as drift, selection, migration, bottlenecks, etc. \nThis creates patterns in the genetic background of the individuals from these populations, such that we can, for example, infer their ancestry from their genome sequences. \nThis is what we refer to as **population structure**.\n\nIntuitively, it's easy to understand that human individuals from the same country are genetically more similar to each other compared to individuals from other countries. \nMuch of this similarity is simply a consequence of their shared evolutionary history, and not directly related to traits that also differ between those populations. \nThus, population structure may confound our trait association analysis and needs to be investigated and taken into account in downstream analyses. \n\n:::{.callout-important}\n#### Set up your R session\n\nIf you haven't done so already, start an R session with the following packages loaded: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\n:::\n\n\n## Principal components analysis\n\nOne popular way to assess the presence of population structure is to use **principal components analysis (PCA)** using the genetic data, to help cluster the individual samples based on their genotypes. \n\nPLINK provides the `--pca` option to perform this task. \nIn the following command we use this option, along with several filters based on our quality control exploration done in previous sections: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset \\\n  --extract results/1000G_subset.prune.in \\\n  --geno 0.05 --mind 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --king-cutoff 0.125 \\\n  --pca\n```\n\nTo recap, our filters are: \n\n- `--geno 0.05` removes variants with > 5% missing data. \n- `--mind 0.05` removes samples with > 5% missing data.\n- `--maf 0.01` removes  variants with < 1% minor allele frequency.\n- `--hwe 0.001 keep-fewhet` removes variants with p-value < 0.001 for the HWE test, but only those with high heterozygosity (as low heterozygosity variants may be due to population structure). \n- `--king-cutoff 0.125` removes individuals with kinship coefficient greater than 1/8 (second-degree relatives).\n\nThe PCA option outputs two files: \n\n- `.eigenvec` contains the principal component scores (also known as eigen vectors), which are the coordinates of each sample on the new dimensionality space. \n- `.eigenval` contains the variance explained by each principal component (also know as eigen values), which can be used to calculate the fraction of variance explained. \n\nWe explore each of these in turn. \n\n\n## Variance explained\n\nA standard practice when analysing a PCA is to consider what fraction of the variance in the original data (in our case genotypes) is explained by each of the principal components. \n\nThis is stored in the `.eigenval` file, which is a simple text file with one value of variance per line: \n\n```bash\nhead -n 5 results/1000G_subset.eigenval\n```\n\n```\n79.3207\n44.1399\n6.95917\n3.5593\n3.55036\n```\n\nWe import this file into into R, making sure to specify a column name manually.\nWe also add a new column to the table, specifying the principal component number.\nFinally, we add a column that calculates the fraction of variance explained by each PC.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read table adding a column name manually\neigenval <- read_tsv(\"results/1000G_subset.eigenval\",\n                     col_names = \"var\")\n\n# add columns with PC number and pct variance explained\neigenval <- eigenval |> \n  mutate(pc = 1:n(),\n         pct_var = var/sum(var)*100)\n  \nhead(eigenval)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n    var    pc pct_var\n  <dbl> <int>   <dbl>\n1 90.5      1   60.1 \n2 28.1      2   18.7 \n3  9.74     3    6.47\n4  7.69     4    5.11\n5  3.42     5    2.27\n6  2.93     6    1.94\n```\n\n\n:::\n:::\n\n\n\n\nWith this table we can now make a barplot of variance explained by each principal component, as well as the cumulative variance explained. \nThis is known as a [scree plot](https://en.wikipedia.org/wiki/Scree_plot). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenval |> \n  ggplot(aes(pc, pct_var)) +\n  geom_col() +\n  geom_line(aes(y = cumsum(pct_var))) +\n  scale_x_continuous(breaks = 1:10) +\n  scale_y_continuous(breaks = seq(0, 100, by = 20))\n```\n\n::: {.cell-output-display}\n![](05-pop_structure_files/figure-html/eigenval-screeplot-1.png){width=672}\n:::\n:::\n\n\n\n\nFrom this visualisation, we can see that most of the genetic variance in our samples is explained by the first two principal components (~80%). \nThis is, by itself, already an indication that there is substantial population structure in our data. \n\nThis should not be surprising, as we know that our individuals come from different geographic regions. \n\n\n## PCA plot\n\nWe now read the eigen vectors, i.e. the principal component scores that represent our samples in the low-dimensionality space calculated by the PCA method. \n\nThis is stored in the `.eigenvec` file, which we can read into R as usual:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvec <- read_tsv(\"results/1000G_subset.eigenvec\") |> \n  clean_names(replace = c(\"#\" = \"\"))\n\nhead(eigenvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  iid         pc1    pc2     pc3     pc4       pc5     pc6       pc7       pc8\n  <chr>     <dbl>  <dbl>   <dbl>   <dbl>     <dbl>   <dbl>     <dbl>     <dbl>\n1 HG00097 -0.0182 0.0417 0.00781 -0.0312 -0.00315  0.00281 -0.000807 -0.000515\n2 HG00107 -0.0186 0.0401 0.0118  -0.0336 -0.00128  0.00135  0.00413   0.00164 \n3 HG00108 -0.0182 0.0401 0.0105  -0.0322 -0.000855 0.00491  0.000789 -0.000235\n4 HG00109 -0.0182 0.0407 0.00967 -0.0360 -0.000648 0.00386  0.00294   0.00440 \n5 HG00110 -0.0186 0.0397 0.00971 -0.0321  0.000463 0.00379  0.00173  -0.00215 \n6 HG00111 -0.0183 0.0404 0.00884 -0.0282 -0.00159  0.00382 -0.00155  -0.000881\n# ℹ 2 more variables: pc9 <dbl>, pc10 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nIn addition to the family and individual IDs, we have 10 columns representing the coordinates of each sample on the principal component space. \n\n:::{.callout-exercise}\n#### PCA plot\n\nUse `ggplot` to make a scatter plot of PC1 vs PC2. \n\nWhat can you conclude about the extent of population structure in the data?\n\n:::{.callout-answer}\n\nThe code to produce the plot is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvec |> \n  ggplot(aes(pc1, pc2)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05-pop_structure_files/figure-html/eigevec-plot1-1.png){width=672}\n:::\n:::\n\n\n\n\nThis very clearly shows population structure in our samples. \nWe can see how groups of samples cluster together in our PCA, indicating their genetic similarity. \n\nTipically we focus on the first 2 PCs, as these explain the most variance, but you may sometimes want to explore further PCs, especially if they still explain a substantial percentage of the variation in the data. \n\n:::\n:::\n\n\n### Adding metadata\n\nThe visualisation created in the exercise above is useful, but we can improve it by joining the sample metadata and colouring our points by world region. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the sample metadata file\nsample_info <- read_tsv(\"data/sample_info.tsv\")\n\nhead(sample_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 18\n  family_id individual_id paternal_id maternal_id gender phenotype population\n  <chr>     <chr>               <dbl> <chr>        <dbl>     <dbl> <chr>     \n1 HG00096   HG00096                 0 0                1         0 GBR       \n2 HG00097   HG00097                 0 0                2         0 GBR       \n3 HG00099   HG00099                 0 0                2         0 GBR       \n4 HG00100   HG00100                 0 0                2         0 GBR       \n5 HG00101   HG00101                 0 0                1         0 GBR       \n6 HG00102   HG00102                 0 0                2         0 GBR       \n# ℹ 11 more variables: relationship <chr>, siblings <chr>, second_order <chr>,\n#   third_order <chr>, children <dbl>, other_comments <dbl>,\n#   phase_3_genotypes <dbl>, related_genotypes <dbl>, omni_genotypes <dbl>,\n#   affy_genotypes <dbl>, super_pop <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# join the eigenvector table with the metadata table\neigenvec <- eigenvec |> \n  left_join(sample_info, \n            by = c(\"iid\" = \"individual_id\"))\n  \n# confirm column names in the joined table\ncolnames(eigenvec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"iid\"               \"pc1\"               \"pc2\"              \n [4] \"pc3\"               \"pc4\"               \"pc5\"              \n [7] \"pc6\"               \"pc7\"               \"pc8\"              \n[10] \"pc9\"               \"pc10\"              \"family_id\"        \n[13] \"paternal_id\"       \"maternal_id\"       \"gender\"           \n[16] \"phenotype\"         \"population\"        \"relationship\"     \n[19] \"siblings\"          \"second_order\"      \"third_order\"      \n[22] \"children\"          \"other_comments\"    \"phase_3_genotypes\"\n[25] \"related_genotypes\" \"omni_genotypes\"    \"affy_genotypes\"   \n[28] \"super_pop\"        \n```\n\n\n:::\n:::\n\n\n\n\nAs our table now contains the columns from the sample metadata, as well as the principal component scores, we can make a nicer visualisation of our PCA. \n\nWe colour points by the world region (`super_pop` column) and also add the percentage of variance explained to the x and y axis labels. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvec |> \n  ggplot(aes(pc1, pc2, colour = super_pop)) +\n  geom_point() +\n  labs(x = paste0(\"PC1 (\", round(eigenval$pct_var[1]), \"%)\"), \n       y = paste0(\"PC2 (\", round(eigenval$pct_var[2]), \"%)\"), \n       colour = \"World Region\")\n```\n\n::: {.cell-output-display}\n![](05-pop_structure_files/figure-html/eigenvec-plot2-1.png){width=672}\n:::\n:::\n\n\n\n\nAs we suspected, this very clearly shows individuals clustering by the world region they originate from. \n\nWe can also see some spread of points within each world region. \nThis is likely due to even further population structure, as individuals within these regions also come from different countries. \n\nAnother way in which PCA can be used, is in detecting **outlier individuals**, i.e. individuals that cluster outside of their expected geographic region. \nIt may be best to remove such individuals, as their metadata and/or genotype data may be innacurate. \n\nPopulation stratification needs to be taken into account when we run our association analysis, which is the topic of the next chapter. \n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- Population structure refers to the presence of genetic subgroups within a population, which may be caused by evolutionary (e.g. drift and selection) and demographic events (e.g. migration and bottlenecks).\n- Population structure may confound GWAS results as false-positive associations may be found for traits that differ across those sub-populations. \n- A common way to assess the presence of population structure is to run Principal Components Analysis on the genetic data, and assess the clustering of individuals on a PCA plot. \n- Together with metadata, PCA can also be used to assess if an individual is an outlier from its assigned population (e.g. if an individual labelled as European clusters with individuals from East Asia).\n:::\n",
    "supporting": [
      "05-pop_structure_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "806e45cd2cc5343105194982d798b0e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Visualising GWAS\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Produce Manhattan plots to visualise the association results across the genome.\n- Explore the association results and refine visualisations to focus on particular regions of interest.\n:::\n\n\n## Manhattan plot\n\n:::{.callout-important}\n#### Set up your R session\n\nIf you haven't done so already, start an R session with the following packages loaded: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\n\n:::\n\n\nImport the data and create custom theme for Manhattan plots: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the association test results including PCA covariates\nblood_covar <- read_tsv(\"results/1000G_subset_pca.blood.glm.linear\") |> \n  clean_names()\n\n# retain only the SNP test\nblood_covar <- blood_covar |> \n  filter(test == \"ADD\")\n\nhead(blood_covar)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n  number_chrom    pos id       ref   alt   provisional_ref a1    omitted a1_freq\n         <dbl>  <dbl> <chr>    <chr> <chr> <chr>           <chr> <chr>     <dbl>\n1            1  54490 rs14114… G     A     N               A     G        0.0787\n2            1  61987 rs76735… A     G     N               G     A        0.317 \n3            1  83795 rs86754… G     A     N               A     G        0.117 \n4            1  86331 rs11520… A     G     N               G     A        0.132 \n5            1  88177 rs14321… G     C     N               C     G        0.0382\n6            1 181508 rs14778… G     C     N               C     G        0.0238\n# ℹ 7 more variables: test <chr>, obs_ct <dbl>, beta <dbl>, se <dbl>,\n#   t_stat <dbl>, p <dbl>, errcode <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\nTo make our Manhattan plot, we can use standard `ggplot2` functionality. \n\n:::{.callout-note collapse=\"true\"}\n#### `ggplot2` code explanation\n\n\nThat is a very long `ggplot2` specification!\nLet's break it down: \n\n- `filter()` is used to retain only p-values below 0.01 before plotting. This is done to reduce the number of points being plotted, to avoid crashing the plotting device. As we are not interested in high p-values, we retain only those below 0.01. \n- `ggplot()` initiates the plot, with genome position as the x-axis and the $-log_{10}(p-value)$ as our y-axis. \n- `geom_point()` displays points on the plot. \n- `geom_hline()` adds a horizontal line at the genome-wide significance threshold of $5 \\times 10^{-8}$, which is often used in human GWAS. \n- `facet_grid()` splits the plot into panels, one per chromosome. We split the facets by \"column\", and we make sure that both the scale and the space allocated to each facet is allowed to vary for each chromosome. Finally, we switch the facet labels to appear at the bottom of the plot, for aesthetic reasons. You can try removing those options to see what happens.\n- `labs()` is used to edit the x-axis label and add a title to the plot. \n- `theme_minimal()` and `theme()` are used together to make the plot more aesthetically pleasing, by removing x-axis labels, tick marks and gridlines.\n\nTo save time, you can save some of this code in a variable, for example:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmanhattan_theme <- theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.background = element_blank()\n  )\n```\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_covar |> \n  filter(p < 0.01) |> \n  ggplot(aes(pos, -log10(p))) +\n  geom_point() +\n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\") +\n  facet_grid(~ number_chrom, \n             scale = \"free_x\", \n             space = \"free_x\",\n             switch = \"x\") +\n  labs(x = \"Chromosome\", \n       title = \"Manhattan plot\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.background = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](08-manhattan_files/figure-html/blood-manhattan-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe plot shows a genome-wide significant association in chromosome 5. \nThere are other regions that seem to contain peaks of association (e.g. on chromosomes 10 and 12), but these do not pass the genome-wide threshold. \n\n\n## Regional plots\n\nNow that we have found an association with our trait, we may want to investigate it further. \nOne common visalisation is to make a \"regional plot\", where we zoom-in on a SNV of interest and make a Manhattan plot, colouring the points by the linkage coefficient to the target SNP. \n\nFirst, let's identify our top-most associated SNV: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_covar |>\n  arrange(p) |>\n  select(number_chrom, pos, id, beta, p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 761,360 × 5\n   number_chrom      pos id          beta             p\n          <dbl>    <dbl> <chr>      <dbl>         <dbl>\n 1            5 32788263 rs1158715  0.513 0.00000000728\n 2            5 32789286 rs2287661  0.513 0.00000000728\n 3            5 32792663 rs13362538 0.510 0.00000000875\n 4            5 32790510 rs1345597  0.509 0.0000000104 \n 5            5 32796486 rs4555828  0.503 0.0000000156 \n 6            5 32796761 rs6450927  0.503 0.0000000156 \n 7            5 32797551 rs7703872  0.503 0.0000000156 \n 8            5 32800911 rs75824420 0.503 0.0000000156 \n 9            5 32802025 rs6890651  0.503 0.0000000156 \n10            5 32792218 rs924612   0.500 0.0000000171 \n# ℹ 761,350 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can see at the top we have two SNPs with essentially the same estimated β coefficient and p-value. \nThese must be two SNVs that essentially have the same genotype across all individuals (i.e. they are in perfect linkage). \nWe arbitrarily choose \"rs1158715\" to proceed with our analysis. \n\nWe can calculate the linkage disequilibrium score for our target SNP using PLINK:\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset_rs1158715 \\\n  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \\\n  --r2-unphased --ld-window-kb 500 --ld-snp rs1158715\n```\n\n\n----\n\nWe can import and visualise the results:\n\n```r\n# histogram of p-values\ncoffee_pval_hist <- coffee_pca |> \n  arrange(p) |> \n  mutate(expected = -log10(ppoints(n())), \n         observed = -log10(p)) |> \n  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> \n  ggplot(aes(p)) +\n  geom_histogram(binwidth = 0.01) +\n  labs(title = \"P-value histogram\")\n\n# qqplot\ncoffee_pval_qq <- coffee_pca |> \n  arrange(p) |> \n  mutate(expected = -log10(ppoints(n())), \n         observed = -log10(p)) |> \n  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> \n  ggplot(aes(expected, observed)) +\n  geom_point() +\n  geom_abline() + \n  labs(title = \"Q-Q plot\")\n\n```\n\nCompose plots: \n\n```r\n((coffee_pval_hist + coffee_pval_qq) / coffee_pval_man) + \n  plot_annotation(\n    title = \"Caffeine consumption (mg/day)\"\n  )\n```\n\n\n## Regional plots\n\n```r\n# Zoom in on one of the SNPs\ncoffee_pca |> \n  filter(number_chrom == 7 & pos > 17244953 - 250e3 & pos < 17244953 + 250e3) |> \n  mutate(label = ifelse(p == min(p), \n                        paste(number_chrom, pos, sep = \":\"),\n                        NA)) |> \n  ggplot(aes(pos, -log10(p))) +\n  geom_point() +\n  geom_text(aes(label = label), hjust = -0.1) +\n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\")\n```\n\nCalculate LD for target SNP:\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset \\\n  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \\\n  --r2-unphased --ld-window-kb 500 --ld-snp rs4410790\n```\n\nVisualise:\n\n```r\nhit <- read_tsv(\"results/1000G_subset.vcor\") |> \n  clean_names()\n\ncoffee_pca |> \n  filter(number_chrom == 7 & pos > 17244953 - 250e3 & pos < 17244953 + 250e3) |> \n  mutate(label = ifelse(p == min(p), \n                        paste(number_chrom, pos, sep = \":\"),\n                        NA)) |> \n  left_join(hit, by = c(\"id\" = \"id_b\")) |> \n  mutate(unphased_r2 = ifelse(is.na(unphased_r2), 0, unphased_r2)) |> \n  mutate(unphased_r2 = ifelse(p == min(p), 1, unphased_r2)) |> \n  ggplot(aes(pos, -log10(p))) +\n  geom_point(aes(colour = unphased_r2, size = unphased_r2)) +\n  geom_text(aes(label = label), hjust = -0.1) +\n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\") +\n  scale_colour_gradient2(low = \"#313695\", \n                         mid = \"#ffffbf\", \n                         high = \"#a50026\", \n                         midpoint = 0.5)\n```\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- TODO\n:::\n",
    "supporting": [
      "08-manhattan_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "9bacec385015da723ab034c09792937c",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Visualising association results\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Summarise what a Manhattan plot displays and why it is useful in the context of GWAS.\n- Produce Manhattan plots using `ggplot2`.\n- Identify the top variants associated with a trait.\n- Calculate linkage disequilibrium statistics between a variant of interest and its neighbours. \n- Produce a regional association plot that focuses on a region of interest.\n:::\n\n\n## Manhattan plots\n\nThe most iconic data visualisation related to GWAS is the so-called **Manhattan plot**, which displays each variant as a point, with its genome position along the x-axis and its associated -log₁₀(p-value) on the y-axis. \nSignificant associations show as \"peaks\" passing through the genome-wide significance threshold, represented as a horizontal line. \nAdditionally, each chromosome is shown a separate panel, giving a complete genome-wide view of the association results. \n\nIn this section we show how to produce this and other visualisations of our association test results in R. \n\n:::{.callout-important}\n#### Set up your R session\n\nIf you haven't done so already, start an R session with the following packages loaded: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\nAs an example, we will continue with the results for the \"blood pressure\" trait. \nHere is how to read it into R, if you haven't done so already:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the association test results including PCA covariates\nblood_covar <- read_tsv(\"results/1000G_subset_pca.blood.glm.linear\") |> \n  clean_names()\n\n# retain only the SNP test\nblood_covar <- blood_covar |> \n  filter(test == \"ADD\")\n```\n:::\n\n\n\n\n:::\n\n## Visualise GWAS results with `ggplot2`\n\nTo make our Manhattan plot, we can use standard `ggplot2` functionality. \nWe use several features of this plotting library to make our plot more effective (see box below for details).\n\n:::{.callout-note collapse=\"true\"}\n#### `ggplot2` code explanation\n\nHere is the break down of our plotting code: \n\n- `filter()` is used to retain only p-values below 0.01 before plotting. This is done to reduce the number of points being plotted, to avoid crashing the plotting device. As we are not interested in high p-values, we retain only those below 0.01. \n- `ggplot()` initiates the plot, with genome position as the x-axis and the -log₁₀(p-value) as our y-axis. \n- `geom_point()` displays points on the plot. \n- `geom_hline()` adds a horizontal line at the genome-wide significance threshold of $5 \\times 10^{-8}$, which is often used in human GWAS. \n- `facet_grid()` splits the plot into panels, one per chromosome. We split the facets by \"column\", and we make sure that both the scale and the space allocated to each facet is allowed to vary for each chromosome. Finally, we switch the facet labels to appear at the bottom of the plot, for aesthetic reasons. You can try removing those options to see what happens.\n- `labs()` is used to edit the x-axis label and add a title to the plot. \n- `theme_minimal()` and `theme()` are used together to make the plot more aesthetically pleasing, by removing x-axis labels, tick marks and gridlines.\n\nTo save time, you can save some of this code in a variable, for example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmanhattan_theme <- theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.background = element_blank()\n  )\n```\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_covar |> \n  filter(p < 0.01) |> \n  ggplot(aes(pos, -log10(p))) +\n  geom_point() +\n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\") +\n  facet_grid(~ number_chrom, \n             scale = \"free_x\", \n             space = \"free_x\",\n             switch = \"x\") +\n  labs(x = \"Chromosome\", \n       title = \"Manhattan plot\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    panel.grid = element_blank(),\n    panel.spacing = unit(0.1, \"lines\"),\n    strip.background = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](08-manhattan_files/figure-html/blood-manhattan-1.png){width=672}\n:::\n:::\n\n\n\n\nThe plot shows a genome-wide significant association in chromosome 5. \nThere are other regions that seem to contain peaks of association (e.g. on chromosomes 10 and 12), but these do not pass the genome-wide threshold. \n\n\n## Regional plots\n\nNow that we have found an association with our trait, we may want to investigate it further. \nOne common visalisation is to make a \"regional plot\", where we zoom-in on a SNV of interest and make a Manhattan plot, colouring the points by the linkage coefficient to the target SNP. \n\nFirst, let's identify our top-most associated SNV: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_covar |>\n  arrange(p) |>\n  select(number_chrom, pos, id, beta, p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 761,360 × 5\n   number_chrom      pos id          beta             p\n          <dbl>    <dbl> <chr>      <dbl>         <dbl>\n 1            5 32788263 rs1158715  0.513 0.00000000728\n 2            5 32789286 rs2287661  0.513 0.00000000728\n 3            5 32792663 rs13362538 0.510 0.00000000875\n 4            5 32790510 rs1345597  0.509 0.0000000104 \n 5            5 32796486 rs4555828  0.503 0.0000000156 \n 6            5 32796761 rs6450927  0.503 0.0000000156 \n 7            5 32797551 rs7703872  0.503 0.0000000156 \n 8            5 32800911 rs75824420 0.503 0.0000000156 \n 9            5 32802025 rs6890651  0.503 0.0000000156 \n10            5 32792218 rs924612   0.500 0.0000000171 \n# ℹ 761,350 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe can see at the top we have two SNPs with the same estimated β coefficient and p-value. \nThese must be two SNVs that have the same genotype across all individuals (i.e. they are in perfect linkage). \nWe arbitrarily choose \"rs1158715\" to proceed with our analysis. \n\nWe can calculate the linkage score for our target SNP using PLINK: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset_rs1158715 \\\n  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \\\n  --r2-unphased --ld-snp rs1158715 \\\n  --ld-window-kb 500 --ld-window-r2 0.05\n```\n\n- `--r2-unphased` calculates the correlation between pairs of SNVs.\n- `--ld-snp` indicates which is the target SNV we are interested in. \n- `--ld-window-kb` restricts the calculation to SNVs within 500 kbp of the target SNV.\n- `--ld-window-r2` indicates what is the minimum r² we want reported. By default this is 0.2, here we lower this threshold for illustration purposes. In real analysis, it may be sensible to truncate the calculation at 0.2, to reduce the size of the output file. \n\nThe `--r2-unphased` option outputs a file with `.vcor` (**v**ariant **cor**relation) extension. \nAs usual, this is a tab-delimited file, which we can read into R: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs1158715 <- read_tsv(\"results/1000G_subset_rs1158715.vcor\") |> \n  clean_names()\n  \nhead(rs1158715)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  number_chrom_a    pos_a id_a      chrom_b    pos_b id_b       unphased_r2\n           <dbl>    <dbl> <chr>       <dbl>    <dbl> <chr>            <dbl>\n1              5 32788263 rs1158715       5 32618642 rs72739273      0.0564\n2              5 32788263 rs1158715       5 32626318 rs16889987      0.0608\n3              5 32788263 rs1158715       5 32631602 rs10805572      0.0548\n4              5 32788263 rs1158715       5 32638605 rs16890002      0.0563\n5              5 32788263 rs1158715       5 32665481 rs6881969       0.0525\n6              5 32788263 rs1158715       5 32670764 rs4530767       0.0544\n```\n\n\n:::\n:::\n\n\n\n\nThe table contains the correlation between genotypes in our SNV of interest (`id_a`) and each other SNV (`id_b`) within 500 kbp of it. \nWe can quickly look at the distribution of the correlation values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs1158715 |> \n  ggplot(aes(unphased_r2)) +\n  geom_histogram(breaks = seq(0, 1, 0.02))\n```\n\n::: {.cell-output-display}\n![](08-manhattan_files/figure-html/cor-hist-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can see that most SNVs have low correlation with our target SNP, but a few have very high correlation. \n\nWe can also see the expected decay in LD with distance from the target SNV:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs1158715 |> \n  # add column with distance to target variant\n  mutate(dist = abs(pos_a - pos_b)) |> \n  # plot with a trend line added\n  ggplot(aes(dist, unphased_r2)) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n```\n\n::: {.cell-output-display}\n![](08-manhattan_files/figure-html/cor-decay-1.png){width=672}\n:::\n:::\n\n\n\n\nFinally, we can produce a **regional association plot**, which displays the strength of association as well as the correlation with the variants surrounding our peak variant.\nWe do this by:\n\n- Filtering our GLM results table to focus on the region of interest.\n- Joining it with the correlation table (using the matching variant ids)\n- Producing a plot with genomic position on the x-axis, -log₁₀(p-value) on the y-axis, and setting the points colour and size by their correlation value.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_covar |> \n  # retain variants within 250kb each side of our target\n  filter(number_chrom == 5 & pos > 32788263 - 250e3 & pos < 32788263 + 250e3) |> \n  # join with our LD table\n  left_join(rs1158715, by = c(\"id\" = \"id_b\")) |> \n  # for SNVs with no correlation value (below 0.05)\n  # we set them to 0 for plotting purposes\n  mutate(unphased_r2 = ifelse(is.na(unphased_r2), 0, unphased_r2)) |> \n  # for the target variant itself, we set it to 1\n  mutate(unphased_r2 = ifelse(id == \"rs1158715\", 1, unphased_r2)) |> \n  # plot\n  ggplot(aes(pos, -log10(p))) +\n  geom_point(aes(colour = unphased_r2, size = unphased_r2)) +\n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\") +\n  scale_colour_gradient2(low = \"#313695\", \n                         mid = \"#ffffbf\", \n                         high = \"#a50026\", \n                         midpoint = 0.5)\n```\n\n::: {.cell-output-display}\n![](08-manhattan_files/figure-html/regional-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nThis visualisation clearly shows a cluster of variants in close proximity of the target variant and with high genotype correlation to it. \n\nThis visualisation is useful not only to display our results, but also to help us prioritise which variants to focus on in downstream analyses.\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- Manhattan plots display the results of the association tests for each variant: \n  - Each variant is displayed along the x-axis according to its genome position.\n  - The y-axis shows the strenght of association as -log₁₀(p-value).\n- Manhattan plots can be produced using standard `ggplot2` functionality, in particular taking advantage of the `facet_grid()` function and custom themes. \n- Once a variant of interest is identified, its correlation with neighbouring variants can be calculated (a measure of LD between neighbouring variants). \n  - A combination of PLINK's options can be used to calculate LD around a target variant: `--r2-unphased`, `--ld-snp`, `--ld-window-kb` and `--ld-window-r2`.\n- Regional association plots are a zoomed-in version of a Manhattan plot, additionally displaying the LD with a target variant using a colour scale. \n:::\n",
    "supporting": [
      "08-manhattan_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "450fd504da2e281b1ea4a1ec7f05d934",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Sample QC\n\n:::{.callout-tip}\n#### Learning objectives\n\n- List metrics that can be used for sample-level quality control and filtering.\n- Use PLINK to calculate genotype call rates, heterozygosity, discordant sex and sample relatedness.\n- Analyse quality metric results in R and assess the need for filtering in downstream analyses. \n- Discuss how these quality metrics are impacted by population structure. \n:::\n\n\n## Per-sample metrics\n\nSimilarly to what we did for variants, we also investigate quality issues in our samples. \nWe will consider the following metrics for each sample: \n\n- **Call rate**: Fraction of missing genotypes. Variants with a high fraction of missing data may indicate overall low quality for that sample and thus be removed from downstream analysis.\n- **Heterozygosity**: The fraction of SNVs that are heterozygous in a given sample. We expect most individuals to have a mixture of both homozygous and heterozygous SNVs. Outliers may indicate genotyping errors. \n- **Relatedness**: Individuals who are related to each other (e.g. siblings, cousins, parents and children) may affect the association test results and create false positive hits. It is therefore good to assess if there are potential close family members before proceeding.  \n- **Discordant sex**: In humans, we expect males to have only one X chromosome and thus no heterozygous variants, while the converse is true for females. This expectation can be used to identify potential mis-matches and correct them before proceeding.\n\nWe will cover each of these below. \n\n:::{.callout-important}\n#### Set up your R session\n\nIf you haven't done so already, start an R session with the following packages loaded: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\n:::\n\n\n## Call rates\n\nSimilarly to what we did for variants, we can calculate how many missing genotypes each individual sample has. \nThis can then be used to assess the need to exclude samples from downstream analyses. \n\nThere are no set rules as to what constitutes a \"good call rate\", but typically we may exclude samples with greater than ~5% of missing genotypes. \nThis threshold may vary, however, depending on the nature of data you have. \n\nAs we saw before, the option `--missing` generates missingness files for both samples and variants, so we don't need to re-run the PLINK command.\nHowever, here it is as a reminder: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --missing\n```\n\nFor the sample missingness report the file extension is `.smiss`, which we can import into R as usual:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmiss <- read_tsv(\"results/1000G_subset.smiss\") |> \n  clean_names()\n  \n# inspect the table\nhead(smiss)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  number_fid iid     missing_ct  obs_ct  f_miss\n  <chr>      <chr>        <dbl>   <dbl>   <dbl>\n1 HG00096    HG00096          0 5353675 0      \n2 HG00097    HG00097          0 5353675 0      \n3 HG00099    HG00099          0 5353675 0      \n4 HG00100    HG00100      42076 5353675 0.00786\n5 HG00101    HG00101          0 5353675 0      \n6 HG00102    HG00102          0 5353675 0      \n```\n\n\n:::\n:::\n\n\n\n\nWe can tabulate how many samples have missing genotypes: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(smiss$missing_ct > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFALSE  TRUE \n  724   180 \n```\n\n\n:::\n:::\n\n\n\n\nAround 20% of our samples have missing data in at least one of the variants. \n\nFor those samples with some missing data, we can check the distribution of the fraction of missing genotypes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmiss |> \n  filter(f_miss > 0) |> \n  ggplot(aes(f_miss)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](04-qc_samples_files/figure-html/smiss-hist-1.png){width=672}\n:::\n:::\n\n\n\n\nFrom this distribution it seems that most individuals have a low fraction of missing genotypes, indicating no problematic samples. \n\nA filter is probably not even necessary in this case, as no sample seems to have more than 5% missing data. \nIn any case, individuals with high rates of missing data, e.g. using the 5% threshold, can be excluded using PLINK's option `--mind 0.05`. \n\n\n## Heterozygosity\n\nAnother useful metric to assess issues with sample quality is to look at the fraction of variants that are heterozygous. \nIn general, we expect an individual to have both homozygous and heterozygous genotypes. \nIndividuals with high heterozygosity may represent poor quality samples (e.g. contaminated samples composed of a mixture of DNA from two individuals). \nConversely, individuals with high homozygosity may indicate inbreeding, which can impact the balance of allele frequencies in the population (as discussed in the Hardy-Weinberg equilibrium section) and potentially bias the results of our association tests. \n\nThere isn't necessarily a clear value, but within a population we should expect the distribution of heterozygosity to be consistent across individuals. \nIf an individual is an outlier (e.g. with too many homozygous or heterozygous sites), then we may infer some quality issues may have ocurred with that sample. \n\nPLINK can calculate per-sample heterozygosity rates using the option `--het`, applying the variant filters defined in the [variant QC section](03-qc_variants.qmd):\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --geno 0.05 --maf 0.01 --het\n```\n\nThe output file has extension `.het`, which we can import into R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhet <- read_tsv(\"results/1000G_subset.het\") |> \n  clean_names()\n\nhead(het)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  number_fid iid      o_hom  e_hom obs_ct      f\n  <chr>      <chr>    <dbl>  <dbl>  <dbl>  <dbl>\n1 HG00096    HG00096 618655 604746 765962 0.0863\n2 HG00097    HG00097 621546 604746 765962 0.104 \n3 HG00099    HG00099 618405 604746 765962 0.0847\n4 HG00100    HG00100 615209 599977 759947 0.0952\n5 HG00101    HG00101 618268 604746 765962 0.0839\n6 HG00102    HG00102 620031 604746 765962 0.0948\n```\n\n\n:::\n:::\n\n\n\n\nWe can make a histogram of the fraction of homozygous individuals:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhet |> \n  ggplot(aes(f)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](04-qc_samples_files/figure-html/het-histogram-1.png){width=672}\n:::\n:::\n\n\n\n\nThis gives a very suspicious distribution. \nWe clearly have different groups of samples, some with higher rates of homozygosity and others with lower rates. \n\nThis is likely a consequence of the fact we have individuals from different populations (geographic areas). \nThis is an issue we will come back to in the **population structure** chapter. \n\nFor now, it is clear that we cannot easily filter samples based on their heterozygosity, as the populations are heterogeneous. \n\n\n## Sample relatedness\n\nOne other thing that can be considered is whether there are potential relationships within your samples. \nIn our dataset all samples are supposed to be unrelated. \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --geno 0.05 --maf 0.01 --mind 0.05 --make-king-table\n```\n\nThis outputs a file with format `.kin0`, which contains pairwise kinship coefficients for each pair of samples. \nWe can read this table into R as usual:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nking <- read_tsv(\"results/1000G_subset.kin0\") |> \n  clean_names()\n  \nhead(king)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  number_fid1 iid1    fid2    iid2      nsnp hethet   ibs0  kinship\n  <chr>       <chr>   <chr>   <chr>    <dbl>  <dbl>  <dbl>    <dbl>\n1 HG00097     HG00097 HG00096 HG00096 765962 0.0682 0.0362 -0.0161 \n2 HG00099     HG00099 HG00096 HG00096 765962 0.0703 0.0338  0.00680\n3 HG00099     HG00099 HG00097 HG00097 765962 0.0674 0.0347 -0.0106 \n4 HG00100     HG00100 HG00096 HG00096 759947 0.0693 0.0357 -0.00771\n5 HG00100     HG00100 HG00097 HG00097 759947 0.0703 0.0383 -0.0189 \n6 HG00100     HG00100 HG00099 HG00099 759947 0.0701 0.0330  0.00793\n```\n\n\n:::\n:::\n\n\n\n\nFor each pair of samples we now have the kinship coefficient calculated using the KING method. \nThe authors of this method indicate that unrelated individuals should have a kinship coefficient of zero, but they recommend using a threshold of ~0.044 (cf. Table 1 in [Manichaikul et al. 2010](https://doi.org/10.1093/bioinformatics/btq559)).\n\nWe can check how many individuals are above this threshold:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(king$kinship > 0.044)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n FALSE   TRUE \n408137     19 \n```\n\n\n:::\n:::\n\n\n\n\nOnly 19 individuals are above this threshold. \nWe can also look at the distribution of this kinship coefficient:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nking |> \n  ggplot(aes(kinship)) +\n  geom_histogram(bins = 100) +\n  geom_vline(xintercept = 1/16)\n```\n\n::: {.cell-output-display}\n![](04-qc_samples_files/figure-html/king-histogram-1.png){width=672}\n:::\n:::\n\n\n\n\nSimilar to what we've seen before for heterozygosity, we get a multi-modal distribution of kinship values.\nThis is again likely because of **population structure**, i.e. the fact that our samples come from different geographic areas and thus may have differing base levels of \"residual relatedness\". \n\nHowever, we can see all most values are negative, which can happen with this coefficient and essentially indicates no relatedness between individuals. \n\nMore worringly, we can see some individuals seem closely related if we sort the table in descending order of kinship and look at the top few rows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nking |> \n  arrange(desc(kinship)) |> \n  head(n = 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 8\n   number_fid1 iid1    fid2    iid2      nsnp hethet     ibs0 kinship\n   <chr>       <chr>   <chr>   <chr>    <dbl>  <dbl>    <dbl>   <dbl>\n 1 NA20900     NA20900 NA20882 NA20882 765962 0.100  0.000256  0.251 \n 2 NA20900     NA20900 NA20891 NA20891 765962 0.0971 0.000317  0.243 \n 3 2481        NA20321 2481a   NA20320 758628 0.112  0.000414  0.242 \n 4 NA21135     NA21135 NA21109 NA21109 760411 0.0819 0.0168    0.122 \n 5 NA19042     NA19042 NA19027 NA19027 753225 0.0940 0.0206    0.112 \n 6 HG00881     HG00881 HG00851 HG00851 765962 0.0739 0.0222    0.0771\n 7 HG00120     HG00120 HG00116 HG00116 765962 0.0759 0.0238    0.0738\n 8 NA19312     NA19312 NA19307 NA19307 765962 0.0927 0.0286    0.0723\n 9 LWK003      NA19434 NA19355 NA19355 765962 0.0862 0.0285    0.0628\n10 HG00240     HG00240 HG00238 HG00238 765962 0.0773 0.0265    0.0611\n11 NA19384     NA19384 NA19025 NA19025 763323 0.0871 0.0297    0.0598\n12 HG02179     HG02179 HG01795 HG01795 765962 0.0712 0.0256    0.0548\n13 NA19452     NA19452 NA19451 NA19451 762593 0.0867 0.0307    0.0532\n14 NA20891     NA20891 NA20864 NA20864 765962 0.0756 0.0271    0.0510\n15 NA19376     NA19376 NA19347 NA19347 765962 0.0862 0.0308    0.0491\n```\n\n\n:::\n:::\n\n\n\n\nWe see a few individuals have a kinship coefficient of ~1/4, which is indicative of full siblings.\nOthers are close to ~1/8 (second degree relationships, e.g. cousins) and a few close to ~1/16 (third degree relationship). \n\nTo eliminate close relationships from downstream analysis, we can use PLINK's option `--king-cutoff 0.125` to eliminate at least second degree relationships.\n\n<!-- \nTODO: prune SNPs; mention --keep results/1000G_subset.king.cutoff.in.id\n-->\n\n<!-- \n\nNOTE: I initially didn't realise there was a `--make-king-table` option already available. \nNOTE: kept this here for reference\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset --geno 0.05 --maf 0.01 --mind 0.05 --make-king triangle\n```\n\nThis command outputs files in different format to other commands we've seen so far.\nTwo complementary files are generated with extensions `.king` and `.king.ids`. \nThe first file is a triangular matrix with pairwise kinship metrics for each pair of individuals. The second file contains the sample IDs, which effectively corresponds to the row and column names of this matrix. \n\nWe can see the top few rows of the matrix: \n\n```bash\nhead -n 5 results/1000G_subset.king\n```\n\nImporting this into R is slightly more work, and we will do a bit more data wrangling to get it into a suitable format for plotting and exploratory analysis. \n\n```r\n# read the IDs and pull them to a standard vector\nking_ids <- read_tsv(\"results/1000G_subset.king.id\") |>\n  clean_names() |> \n  pull(iid)\n\n# we use standard read.table as it provides the fill option\nking <- read.table(\"results/1000G_subset.king\", \n                   fill = TRUE, \n                   col.names = king_ids)\n\n# convert to long format\nking <- king |> \n  # add column with \"row\" IDs\n  mutate(id1 = king_ids) |> \n  # reshape to \"long\" format\n  pivot_longer(-id1, \n               names_to = \"id2\", \n               values_to = \"kinship\") |> \n  drop_na(kinship)\n  \nhead(king)\n``` \n\n-->\n\n\n## Discordant sex\n\n:::{.callout-caution}\nSorry, we're still working on this section. \nIn the meanwhile, you can look at PLINK's [documentation for the `--check-sex` option](https://www.cog-genomics.org/plink/2.0/basic_stats#check_sex).\n:::\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- TODO\n:::\n",
    "supporting": [
      "04-qc_samples_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "d6e89ef0cd8904a0d7f8fdf2428ffb5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: GWAS\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Running GWAS\n\n:::{.callout-tip}\n#### Learning objectives\n\n- Fit a GLM model to trait data using PLINK both with and without covariates.\n- Generate Q-Q plots for the p-values from the association test, to assess over- or under-inflation issues.\n- Recognise and adjust for population structure in the GLM model.\n\n:::\n\n\n## Fitting an association model\n\nFitting a genotypic linear model to our traits with PLINK can be done using the `--glm` option (for \"generalised linear model\"). \nWe also need to provide a phenotype file, which is tab-delimited with the first two columns being the family and sample IDs, and remaining columns the traits. \nPLINK will automatically detect whether the traits are continous or binary and fit a model accordingly. \n\nAs before, we apply the quality filters discussed in previous sections. \nHere is the full command: \n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset_nocovar \\\n  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \\\n  --pheno data/phenotypes.tsv \\\n  --glm allow-no-covars\n```\n\nWe added a modifier to the `--glm` option called `allow-no-covars`. \nThis is because, by default, PLINK expects most standard GWAS to use covariates in the model to account for population structure, which is standard practice. \nHowever, we want to explore first what happens if we ignore this aspect when running the association tests. \n\nThe `--glm` option generates one file for each trait. \nThe file extensions are `.glm.linear` for quantitative traits and `.glm.logistic.hybrid` for binary traits. \n\n\n:::{.callout-important}\n#### Set up your R session\n\nIf you haven't done so already, start an R session with the following packages loaded: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries\nlibrary(tidyverse) # data manipulation\nlibrary(patchwork) # to compose plots\nlibrary(janitor)   # to clean column names\ntheme_set(theme_minimal()) # change default ggplot2 theme\n```\n:::\n\n\n\n\n:::\n\n\n## Q-Q plots\n\nThe results files from `--glm` are tab-delimited, which we can read into R as usual. \nWe start with one of our quantiative traits, blood pressure: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_nocovar <- read_tsv(\"results/1000G_subset_nocovar.blood.glm.linear\") |> \n  clean_names(replace = c(\"#\" = \"\"))\n\nhead(blood_nocovar)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n  chrom   pos id         ref   alt   provisional_ref a1    omitted a1_freq test \n  <chr> <dbl> <chr>      <chr> <chr> <chr>           <chr> <chr>     <dbl> <chr>\n1 1     14470 rs1385614… G     A     N               A     G        0.0402 ADD  \n2 1     49157 rs1999980… G     A     N               A     G        0.0300 ADD  \n3 1     64025 rs1366827… T     C     N               C     T        0.0618 ADD  \n4 1     95978 rs1441941… A     C     N               C     A        0.0196 ADD  \n5 1     97960 rs62642103 A     G     N               G     A        0.0142 ADD  \n6 1     98974 rs12184307 A     G     N               G     A        0.0882 ADD  \n# ℹ 6 more variables: obs_ct <dbl>, beta <dbl>, se <dbl>, t_stat <dbl>,\n#   p <dbl>, errcode <chr>\n```\n\n\n:::\n:::\n\n\n\n\nAs explained in the [previous chapter](06-stats.qmd), we start by looking at the distribution of our p-values using a histogram:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_nocovar |> \n  ggplot(aes(p)) +\n  geom_histogram(binwidth = 0.01)\n```\n\n::: {.cell-output-display}\n![](07-glm_files/figure-html/blood-hist-1.png){width=672}\n:::\n:::\n\n\n\n\nThis looks relatively uniform towards the right-end of the distribution, but there's quite a sharp skew towards the low end. \nThis may indicate some p-value inflation due to unaccounted confounders. \n\nWe can better visualise the issue of inflation using a **Q-Q plot**.\nFor this, we need to calculate the expected p-values, corresponding to our observed ones. \nWe do this in two steps: \n\n- Sorting our table by p-value, using the `arrange()` function.\n- Create a new column with as many data points, but uniformly split between 0 and 1 (the \"uniform\" distribution expectation). We can do this with the `ppoints()` (\"probability points\") function.\n\nNote that due to the very high number of data points (915795 in our case), it is often a good idea to plot a random sample of points, to avoid overloading the plotting device (at best it may be very slow to render the plots, at worse it may crash your R session).\nAs in this case we are particularly interested in the low p-values, we retain all p-values below 0.01 and then randomly sample 5% of the rest.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_nocovar |> \n  arrange(p) |> \n  # generate uniformly split points between 0-1\n  # also -log10 transform our p-values\n  mutate(expected = -log10(ppoints(n())), \n         observed = -log10(p)) |> \n  # retain all p-values below 0.001\n  # but only ~5% of those above that threshold\n  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.05)) |> \n  ggplot(aes(expected, observed)) +\n  geom_point() +\n  geom_abline()\n```\n\n::: {.cell-output-display}\n![](07-glm_files/figure-html/blood-qqplot-1.png){width=672}\n:::\n:::\n\n\n\n\nThis plot clearly shows substantial inflation of our p-value distribution, as nearly all points fall above the expected diagonal. \n\nWe can calculate the so-called **inflation factor** for our p-values, which is derived from a χ² distribution. \nAn inflation factor of ~1 indicates no inflation, whereas values above that indicate an inflation relative to the null expectation. \n\nHere is the code to calculate the inflation factor for our p-values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(qchisq(blood_nocovar$p, df=1, lower.tail = FALSE), na.rm = T)/qchisq(0.5, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.049382\n```\n\n\n:::\n:::\n\n\n\n\nWe get a value of ~3, which clearly indicates an inflation. \nThis is not surprising, as we already assessed that our data has substantial population structure, which will confound some of our analysis. \n\nOne way to understand this confounding is to consider the distribution of our trait across world regions. \nThe code below reads the phenotype and sample metadata tables, and joins them together to generate a boxplot of blood pressure across countries.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheno <- read_tsv(\"data/phenotypes.tsv\")\nsample_info <- read_tsv(\"data/sample_info.tsv\")\n\nsample_info |> \n  full_join(pheno, by = c(\"individual_id\" = \"IID\")) |> \n  ggplot(aes(blood, population, fill = super_pop)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](07-glm_files/figure-html/pheno-boxplot-1.png){width=672}\n:::\n:::\n\n\n\n\nAs we can see, there are differences in the mean blood pressure of different populations. \nThis means that any genetic differences between those populations (due to non-random mating, drift, selection, etc.) may show as \"significant\" associations with blood pressure, causing false positives. \n\n\n## Adjusting for population structure\n\nTo avoid the confounding due to population structure, we can add the PCA scores as covariates to our GLM. \nThis is done using the `--covar` option:\n\n```bash\nplink2 --pfile data/plink/1000G_subset --out results/1000G_subset_pca \\\n  --geno 0.05 --maf 0.01 --hwe 0.001 keep-fewhet \\\n  --mind 0.05 --keep results/1000G_subset.king.cutoff.in.id \\\n  --pheno data/phenotypes.tsv \\\n  --glm \\\n  --covar results/1000G_subset.eigenvec\n```\n\nAs before, we import our results and re-assess the issue of p-value inflation. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import the results table\nblood_covar <- read_tsv(\"results/1000G_subset_pca.blood.glm.linear\") |> \n  clean_names(replace = c(\"#\" = \"\"))\n\nhead(blood_covar)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n  chrom   pos id         ref   alt   provisional_ref a1    omitted a1_freq test \n  <chr> <dbl> <chr>      <chr> <chr> <chr>           <chr> <chr>     <dbl> <chr>\n1 1     14470 rs1385614… G     A     N               A     G        0.0402 ADD  \n2 1     14470 rs1385614… G     A     N               A     G        0.0402 PC1  \n3 1     14470 rs1385614… G     A     N               A     G        0.0402 PC2  \n4 1     14470 rs1385614… G     A     N               A     G        0.0402 PC3  \n5 1     14470 rs1385614… G     A     N               A     G        0.0402 PC4  \n6 1     14470 rs1385614… G     A     N               A     G        0.0402 PC5  \n# ℹ 6 more variables: obs_ct <dbl>, beta <dbl>, se <dbl>, t_stat <dbl>,\n#   p <dbl>, errcode <chr>\n```\n\n\n:::\n:::\n\n\n\n\nYou may notice that this table, while similar to the previous before, has many more rows. \nThis is because we now have 10 covariates (each of the principal components from our PCA), and PLINK reports the statistical test for their association with the trait, in addition to the genotype association. \nThis is indicated in the `test` column: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the unique values in the \"test\" column\nunique(blood_covar$test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ADD\"  \"PC1\"  \"PC2\"  \"PC3\"  \"PC4\"  \"PC5\"  \"PC6\"  \"PC7\"  \"PC8\"  \"PC9\" \n[11] \"PC10\" \"SEX\" \n```\n\n\n:::\n:::\n\n\n\n\nWe have test results for each PC as well as a test labelled \"ADD\". \nThis refers to the \"additive genotypic effect\", which is what we are interested in. \nAs we are not interested in the association between PCs and our trait, we exclude them from the table in downstream analysis:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# retain only the SNP test\nblood_covar <- blood_covar |> \n  filter(test == \"ADD\")\n```\n:::\n\n\n\n\nWe can now make the same p-value diagnostic plots as before: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram of p-values\nblood_covar |> \n  arrange(p) |> \n  mutate(expected = -log10(ppoints(n())), \n         observed = -log10(p)) |> \n  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> \n  ggplot(aes(p)) +\n  geom_histogram(binwidth = 0.01) +\n  labs(title = \"P-value histogram\")\n```\n\n::: {.cell-output-display}\n![](07-glm_files/figure-html/blood2-pvals-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# qqplot\nblood_covar |> \n  arrange(p) |> \n  mutate(expected = -log10(ppoints(n())), \n         observed = -log10(p)) |> \n  filter(p <= 0.001 | (p > 0.001 & runif(n()) < 0.01)) |> \n  ggplot(aes(expected, observed)) +\n  geom_point() +\n  geom_abline() + \n  labs(title = \"Q-Q plot\")\n```\n\n::: {.cell-output-display}\n![](07-glm_files/figure-html/blood2-pvals-2.png){width=672}\n:::\n:::\n\n\n\n\nFrom the visualisations above, we can see the issue of p-value inflation seems to have been resolved, as most points in the Q-Q plot seem to fall in the line. \nWe can also calculate the inflation factor, which confirms this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(qchisq(blood_covar$p, df=1, lower.tail = F), na.rm = T)/qchisq(0.5, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.016059\n```\n\n\n:::\n:::\n\n\n\n\nThe value is now ~1, indicating no major issues. \n\nThe histogram and Q-Q plot also reveal an excess of very low p-values, which is a sign we have some significant (true) associations. \nThe next chapter explores how we can visualise these potential associations across our genome. \n\n\n## Summary\n\n::: {.callout-tip}\n#### Key Points\n\n- The `--glm` option in PLINK can be used to fit a generalised linear model to the trait data. \n  - This option automatically detects whether the trait(s) provided are binary or quantitative. \n- Q-Q plots are an essential tool to assess p-value inflation in the association results. \n- One method to adjust for population structure is to add the PCA scores as covariates to the linear model.\n  - The option `--covar` can be used to give a file of covariate variables to PLINK's model. \n:::\n",
    "supporting": [
      "07-glm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}